package topcoder.srm7xx.srm708.div1;

import java.util.Arrays;

public class PalindromicSubseq {
    private static final long MOD = 1000000007;

    public int solve(String s) {
        n = s.length();
        c = s.toCharArray();
        memo = new int[n][n];
        memo2 = new int[n][n];
        for (int i = 0; i < n ; i++) {
            Arrays.fill(memo[i], -1);
            Arrays.fill(memo2[i], -1);
        }

        x = new long[n];
        for (int i = 0; i < n ; i++) {
            for (int j = i ; j < n ; j++) {
                dfs(i, j);
                dfs2(i, j);
            }
        }

        for (int i = 0; i < n ; i++) {
            for (int j = i ; j < n ; j++) {
                if (c[i] == c[j]) {
                    long cnt = dfs(i+1, j-1) + 1;
                    long cnt2 = dfs2(i-1, j+1) + 1;
                    x[i] += cnt * cnt2 % MOD;
                    if (i < j) {
                        x[j] += cnt * cnt2 % MOD;
                    }
                }
            }
        }

        long ret = 0;
        for (long i = 0; i < n ; i++) {
            ret ^= ((i+1) * x[(int)i]) % MOD;
        }
        return (int)ret;
    }

    int n;
    char[] c;
    int[][] memo;
    int[][] memo2;
    long[] x;

    // [i,j]
    public long dfs(int i, int j) {
        if (i > j) {
            return 0;
        }
        if (memo[i][j] != -1) {
            return memo[i][j];
        }
        long ret = 0;
        if (c[i] != c[j]) {
            ret += dfs(i+1, j);
            ret += dfs(i, j-1);
            ret += MOD-dfs(i+1, j-1);
        } else {
            ret++;
            ret += dfs(i+1, j);
            ret += dfs(i, j-1);
        }
        ret %= MOD;
        memo[i][j] = (int)ret;
        return ret;
    }


    // [i,j]
    public long dfs2(int i, int j) {
        if (i > j || i < 0 || j >= n) {
            return 0;
        }
        if (memo2[i][j] != -1) {
            return memo2[i][j];
        }
        long ret = 0;
        if (c[i] != c[j]) {
            ret += dfs2(i-1, j);
            ret += dfs2(i, j+1);
            ret += MOD-dfs2(i-1, j+1);
        } else {
            ret++;
            ret += dfs2(i-1, j);
            ret += dfs2(i, j+1);
        }
        ret %= MOD;
        memo2[i][j] = (int)ret;
        return ret;
    }

    public static void main(String[] args) {
        PalindromicSubseq ss = new PalindromicSubseq();
        debug(ss.solve("aaba"));
    }

    public static void debug(Object... o) {
        System.err.println(Arrays.deepToString(o));
    }

}
